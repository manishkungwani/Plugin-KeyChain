<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Plugin.KeyChain</name>
    </assembly>
    <members>
        <member name="T:Plugin.KeyChain.CrossKeyChain">
            <summary>
            Cross platform KeyChain implemenations
            </summary></member>
        <member name="P:Plugin.KeyChain.CrossKeyChain.Current">
            <summary>
            Current settings to use
            </summary></member>
        <member name="T:Plugin.KeyChain.KeyChainImplementation">
            <summary>
            Implementation for KeyChain
            </summary></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.SetKey(System.String,System.String)">
            <summary>
            Save a Key (or a Password) to the KeyChain
            </summary>
            <returns><c>true</c>, if key was saved, <c>false</c> otherwise.</returns>
            <param name="keyName">Key name or username.</param>
            <param name="keyValue">Key value or password.</param></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.SaveKey(System.String,System.String)">
            <summary>
            Same as SetKey(name, value), but it deletes any old key before attempting to save
            </summary>
            <returns><c>true</c>, if key was saved, <c>false</c> otherwise.</returns>
            <param name="keyName">Key name.</param>
            <param name="keyValue">Key value.</param></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.GetKey(System.String)">
            <summary>
            Gets the key/password value from the keyChain.
            </summary>
            <returns>The key/password (or null if the password was not found in the KeyChain).</returns>
            <param name="keyName">Keyname/username.</param></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.DeleteKey(System.String)">
            <summary>
            Deletes a key (or a password) from the KeyChain.
            </summary>
            <returns><c>true</c>, if key was deleted, <c>false</c> otherwise.</returns>
            <param name="keyName">Key name (or username).</param></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.DeletePassword(System.String,System.String,System.Boolean)">
            <summary>
            Deletes a username/password record.
            </summary>
            <param name="username">the username to query. Not case sensitive. May not be NULL.</param>
            <param name="serviceId">the service description to query. Not case sensitive.  May not be NULL.</param>
            <param name="synchronizable">
            Defines if the record you want to delete is syncable via iCloud keychain or not. Note that using the same username and service ID
            but different synchronization settings will result in two keychain entries.
            </param>
            <returns>Status code</returns></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.SetPassword(System.String,System.String,System.String,Security.SecAccessible,System.Boolean)">
            <summary>
            Sets a password for a specific username.
            </summary>
            <param name="username">the username to add the password for. Not case sensitive.  May not be NULL.</param>
            <param name="password">the password to associate with the record. May not be NULL.</param>
            <param name="serviceId">the service description to use. Not case sensitive.  May not be NULL.</param>
            <param name="secAccessible">defines how the keychain record is protected</param>
            <param name="synchronizable">
            Defines if keychain record can by synced via iCloud keychain.
            Note that using the same username and service ID but different synchronization settings will result in two keychain entries.
            </param>
            <returns>SecStatusCode.Success if everything went fine, otherwise some other status</returns></member>
        <member name="M:Plugin.KeyChain.KeyChainImplementation.GetPassword(System.String,System.String,System.Boolean)">
            <summary>
            Gets a password for a specific username.
            </summary>
            <param name="username">the username to query. Not case sensitive.  May not be NULL.</param>
            <param name="serviceId">the service description to use. Not case sensitive.  May not be NULL.</param>
            <param name="synchronizable">
            Defines if the record you want to get is syncable via iCloud keychain or not. Note that using the same username and service ID
            but different synchronization settings will result in two keychain entries.
            </param>
            <returns>
            The password or NULL if no matching record was found.
            </returns></member>
    </members>
</doc>
